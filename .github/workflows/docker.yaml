name: Pusher

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨 1 点执行


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Start Build Process
      run: |
        echo "### 🚀 开始构建流程" >> $GITHUB_STEP_SUMMARY
        echo "#### ⏰ 构建信息" >> $GITHUB_STEP_SUMMARY
        echo "- 开始时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- 触发事件: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 执行分支: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 构建编号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

    - name: System Info Check
      run: |
        echo "### 💻 系统信息" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "操作系统: $(uname -a)" >> $GITHUB_STEP_SUMMARY
        echo "Docker 版本: $(docker --version)" >> $GITHUB_STEP_SUMMARY
        echo "磁盘使用情况:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Before freeing up disk space
      run: |
        echo "::group::磁盘空间检查 - 清理前"
        df -hT
        echo "::endgroup::"

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: After Space Cleanup
      run: |
        echo "### 💾 磁盘空间优化" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "清理后可用空间:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # 记录开始时间
    - name: Set start time
      id: start_time
      run: |
        echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push image Aliyun
      id: build_push
      run: |
        # 初始化时间变量
        build_start_time=$(date +%s)
        processed_images=0
        failed_images=0
        attempt=1  # 初始化 attempt 变量
        
        # 添加调试信息
        echo "Debug: 显示 images.txt 内容"
        cat images.txt
        echo "Debug: 显示文件编码"
        file images.txt
        
        # 在docker login之后，拉取镜像之前添加：
        echo "### 🚀 配置构建优化" >> $GITHUB_STEP_SUMMARY
        echo "- 启用 BuildKit" >> $GITHUB_STEP_SUMMARY
        echo "- 配置并行下载" >> $GITHUB_STEP_SUMMARY
        echo "- 启用镜像层缓存" >> $GITHUB_STEP_SUMMARY

        # 设置 Docker 配置
        echo '{
            "experimental": true,
            "max-concurrent-downloads": 10,
            "max-concurrent-uploads": 10,
            "registry-mirrors": ["https://registry.docker-cn.com"]
        }' | sudo tee /etc/docker/daemon.json

        # 重启 Docker 使配置生效
        sudo systemctl restart docker

        # 设置环境变量
        export DOCKER_BUILDKIT=1
        export DOCKER_CLI_EXPERIMENTAL=enabled
        
        # 显示Docker配置确认
        echo "Debug: 当前Docker配置:"
        sudo cat /etc/docker/daemon.json

        # 显示Docker信息
        echo "Debug: Docker信息:"
        docker info
        
        # 定义重试函数
        retry_command() {
          local cmd="$1"
          local max_attempts=3
          local attempt=1
          local wait_time=10
          local error_msg=""
          local retry_count=0
          
          echo "Debug: 执行命令: $cmd"
          
          # 直接执行命令
          if eval "$cmd" > /tmp/output.log 2> /tmp/error.log; then
              echo "Debug: 命令输出:"
              cat /tmp/output.log
              echo "Debug: 错误输出:"
              cat /tmp/error.log
              retry_count=$((attempt-1))
              return 0
          else
              local exit_code=$?
              error_msg=$(cat /tmp/error.log)
              echo "::warning::命令执行失败 (尝试 $attempt/$max_attempts)"
              echo "Debug: 退出代码: $exit_code"
              echo "Debug: 命令输出:"
              cat /tmp/output.log
              echo "Debug: 错误输出:"
              cat /tmp/error.log
              if [ $attempt -lt $max_attempts ]; then
                  echo "等待 ${wait_time} 秒后重试..."
                  sleep $wait_time
                  wait_time=$((wait_time * 2))
              fi
              ((attempt++))
              return 1
          fi
        }

        echo "### 🔄 镜像处理进度" >> $GITHUB_STEP_SUMMARY
        echo "#### 登录状态" >> $GITHUB_STEP_SUMMARY
        
        # 使用重试函数进行登录
        echo "Debug: 尝试登录到阿里云容器镜像服务"
        if docker login -u "$ALIYUN_REGISTRY_USER" -p "$ALIYUN_REGISTRY_PASSWORD" "$ALIYUN_REGISTRY" > /tmp/login.log 2>&1; then
          echo "Debug: Docker 登录命令执行结果:"
          cat /tmp/login.log
          if grep -q "Login Succeeded" /tmp/login.log; then
            echo "✅ 阿里云容器镜像服务登录成功" >> $GITHUB_STEP_SUMMARY
            echo "Debug: 登录成功确认"
          else
            echo "❌ 阿里云容器镜像服务登录失败: 未找到成功标记" >> $GITHUB_STEP_SUMMARY
            echo "Debug: 登录输出不包含成功标记"
            exit 1
          fi
        else
          echo "❌ 阿里云容器镜像服务登录失败" >> $GITHUB_STEP_SUMMARY
          echo "Debug: Docker 登录命令失败，退出代码: $?"
          cat /tmp/login.log
          echo "ERROR_INFO<<EOF" >> $GITHUB_ENV
          echo "登录失败，请检查凭据是否正确。错误日志：" >> $GITHUB_ENV
          cat /tmp/login.log >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          exit 1
        fi
        
        # 初始化错误信息收集
        errors=()
        
        # 初始化镜像信息收集数组
        declare -a successful_images=()
        declare -a failed_images_info=()
        
        # 创建临时目录用于状态跟踪
        mkdir -p /tmp/docker_push_status
        
        # 检查文件是否存在
        if [ ! -f "images.txt" ]; then
            echo "Error: images.txt 文件不存在"
            exit 1
        fi
        
        # 清理文件格式
        echo "Debug: 清理文件格式"
        # 删除空行和Windows换行符
        sed -i '/^[[:space:]]*$/d' images.txt
        sed -i 's/\r$//' images.txt
        
        # 显示处理后的文件内容
        echo "Debug: 处理后的文件内容:"
        cat -n images.txt
        
        # 初始化计数器
        total_images=0
        processed_images=0
        failed_images=0
        
        # 计算总镜像数（添加错误处理）
        echo "Debug: 开始计算总镜像数"
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            echo "Debug: 处理行: '$line'"
            
            # 验证镜像格式（改进的格式验证）
            if ! echo "$line" | grep -qE '^([a-zA-Z0-9._-]+/)?[a-zA-Z0-9._-]+(/[a-zA-Z0-9._-]+)?:[a-zA-Z0-9._-]+$'; then
                echo "Error: 无效的镜像格式: '$line'"
                echo "镜像格式应该是: [registry/][namespace/]name:tag"
                exit 1
            fi
            
            echo "Debug: 有效的镜像格式: $line"
            
            # 在增加计数之前添加调试信息
            echo "Debug: 当前总数: $total_images"
            # 修改计数器递增的方式
            total_images=$((total_images + 1))
            if [ $? -ne 0 ]; then
                echo "Error: 计数器递增失败"
                exit 1
            fi
            echo "Debug: 更新后总数: $total_images"
            
            # 验证镜像格式解析
            echo "Debug: 开始解析镜像格式"
            image_name_tag=$(echo "$line" | awk -F'/' '{print $NF}') || { echo "Error: 解析镜像名称和标签失败"; exit 1; }
            echo "Debug: 成功解析镜像名称和标签: $image_name_tag"
            
            name_space=$(echo "$line" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}') || { echo "Error: 解析命名空间失败"; exit 1; }
            echo "Debug: 成功解析命名空间: '$name_space'"
            
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "Debug: 成功解析镜像名: $image_name"
            
            echo "Debug: 镜像解析测试完成:"
            echo "- 完整镜像: $line"
            echo "- 镜像名称和标签: $image_name_tag"
            echo "- 命名空间: $name_space"
            echo "- 镜像名: $image_name"
            
            # 验证解析结果
            if [ -z "$image_name" ]; then
                echo "Error: 镜像名为空"
                exit 1
            fi
            if [ -z "$image_name_tag" ]; then
                echo "Error: 镜像名称和标签为空"
                exit 1
            fi
            
            echo "Debug: 该行处理完成"
        done < images.txt || { echo "Error: 文件读取失败"; exit 1; }
        
        echo "Debug: 文件读取完成"
        
        # 验证总镜像数
        echo "Debug: 验证总镜像数"
        if [ $total_images -eq 0 ]; then
            echo "Error: 未找到有效的镜像配置"
            exit 1
        fi
        
        echo "Debug: 找到 $total_images 个有效镜像"
        
        # 导出初始统计信息到环境变量
        {
            echo "build_start_time=${build_start_time}" >> $GITHUB_ENV
            echo "total_images=${total_images}" >> $GITHUB_ENV
        }
        
        # 添加处理统计到摘要
        {
            echo "#### 📊 处理统计" >> $GITHUB_STEP_SUMMARY
            echo "- 待处理镜像总数: ${total_images}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🔍 镜像处理详情" >> $GITHUB_STEP_SUMMARY
            echo "| 序号 | 源镜像 | 目标镜像 | 状态 | 耗时 | 重试次数 |" >> $GITHUB_STEP_SUMMARY
            echo "|------|--------|-----------|------|------|-----------|" >> $GITHUB_STEP_SUMMARY
        }
        
        echo "Debug: 开始处理镜像"
        # 确保变量和数组正确初始化
        processed_images=0
        failed_images=0
        retry_count=0
        declare -a successful_images=()
        declare -a failed_images_info=()
        
        echo "Debug: 初始化处理变量完成"
        echo "Debug: 开始镜像处理循环"
        
        # 主处理循环
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 在处理前增加计数
            current_count=$((processed_images + 1))
            echo "Debug: 开始处理第 $current_count/$total_images 个镜像"
            
            # 解析镜像信息
            image="$line"
            image="${image%%@*}"
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            tag=$(echo "$image_name_tag" | awk -F':' '{print $2}')
            
            # 构建目标镜像名称
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
            
            echo "Debug: 处理镜像: $line"
            echo "Debug: 目标镜像: $new_image"
            
            # 直接拉取镜像
            echo "Debug: 开始处理"
            start_time=$(date +%s)
            
            if retry_command "docker pull $line"; then
                echo "Debug: 镜像拉取成功: $line"
                
                if retry_command "docker tag $image $new_image && docker push $new_image"; then
                    end_time=$(date +%s)
                    duration=$((end_time - start_time))
                    echo "Debug: 成功推送镜像: $new_image (耗时: ${duration}s)"
                    echo "| ${current_count}/${total_images} | \`${image}\` | \`${new_image}\` | ✅ | ${duration}s | ${retry_count} |" >> $GITHUB_STEP_SUMMARY
                    successful_images+=("✅ $new_image (耗时: ${duration}s)")
                    
                    # 清理镜像
                    docker rmi "$image" "$new_image" || true
                    # 清理临时文件
                    rm -f /tmp/output.log /tmp/error.log
                else
                    echo "Debug: 镜像推送失败"
                    ((failed_images++))
                    errors+=("推送失败: $image -> $new_image")
                    failed_images_info+=("❌ $image -> $new_image")
                    echo "| ${current_count}/${total_images} | \`${image}\` | \`${new_image}\` | ❌ | - | ${retry_count} |" >> $GITHUB_STEP_SUMMARY
                fi
            else
                echo "Debug: 镜像拉取失败"
                ((failed_images++))
                errors+=("拉取失败: $line")
                failed_images_info+=("❌ $line")
                echo "| ${current_count}/${total_images} | \`$line\` | - | ❌ | - | ${retry_count} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            ((processed_images++))
            echo "Debug: 检查磁盘空间状态"
            df -hT
            
            echo "Debug: 完成处理镜像: $line"
            echo "Debug: 当前进度: $processed_images/$total_images"
        done < images.txt
        
        echo "Debug: 镜像处理循环完成"
        echo "Debug: 处理结果统计:"
        echo "- 总数: $total_images"
        echo "- 已处理: $processed_images"
        echo "- 失败: $failed_images"
        
        # 更新最终统计
        build_end_time=$(date +%s)
        total_duration=$((build_end_time - build_start_time))
        
        # 计算成功率
        if [ $total_images -gt 0 ]; then
          success_rate=$(( (processed_images - failed_images) * 100 / total_images ))
        else
          success_rate=0
        fi
        
        # 导出统计信息到环境变量
        {
          echo "success_rate=${success_rate}" >> $GITHUB_ENV
          echo "total_duration=${total_duration}" >> $GITHUB_ENV
          echo "processed_images=${processed_images}" >> $GITHUB_ENV
          echo "failed_images=${failed_images}" >> $GITHUB_ENV
          echo "total_images=${total_images}" >> $GITHUB_ENV
        }
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 📈 最终统计" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 成功处理: $((processed_images - failed_images)) 个" >> $GITHUB_STEP_SUMMARY
        echo "- ❌ 处理失败: ${failed_images} 个" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 成功率: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
        echo "- ⏱️ 总耗时: ${total_duration} 秒" >> $GITHUB_STEP_SUMMARY
        
        # 如果有错误，记录到环境变量中
        if [ ${#errors[@]} -gt 0 ]; then
          echo "ERROR_INFO<<EOF" >> $GITHUB_ENV
          echo "处理过程中出现以下错误：" >> $GITHUB_ENV
          printf '%s\n' "${errors[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: Build Summary
      if: always()
      run: |
        if [ -n "${{ env.build_start_time }}" ]; then
          start_time="${{ env.build_start_time }}"
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⏰ 时间信息" >> $GITHUB_STEP_SUMMARY
          echo "- 开始时间: $(date -d "@$start_time" '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 结束时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 总耗时: ${{ env.total_duration }} 秒" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⚠️ 构建过程中断" >> $GITHUB_STEP_SUMMARY
          echo "构建过程未正常完成，无法获取完整的时间信息。" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 📊 处理统计" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.total_images }}" ]; then
          total="${{ env.total_images }}"
          failed="${{ env.failed_images }}"
          success=$((total - failed))
          
          echo "Debug: 计算统计信息"
          echo "- 总数: $total"
          echo "- 失败: $failed"
          echo "- 成功: $success"
          
          echo "- 总镜像数: $total 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功数量: $success 个" >> $GITHUB_STEP_SUMMARY
          echo "- 失败数量: $failed 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功率: ${{ env.success_rate }}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ 无可用统计信息" >> $GITHUB_STEP_SUMMARY
        fi

    # 添加邮件通知功能
    - name: Send Notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_PASSWORD }}
        subject: 'Ali_ACR_Pusher 构建通知'
        to: ${{ secrets.GMAIL_USERNAME }}
        from: ${{ secrets.GMAIL_USERNAME }}
        html_body: |
          <h2>🔔 构建通知</h2>
          
          <h3>📊 构建状态</h3>
          ${{ job.status == 'success' && '✅ 构建成功' || '❌ 构建失败' }}
          
          <h3>📋 详细信息</h3>
          <ul>
            <li>🏢 仓库：${{ github.repository }}</li>
            <li>🔄 触发事件：${{ github.event_name }}</li>
            <li>📝 提交信息：${{ github.event.head_commit.message }}</li>
            <li>👤 提交者：${{ github.actor }}</li>
            <li>⏰ 开始时间：$(date -d @${{ env.build_start_time }} '+%Y-%m-%d %H:%M:%S')</li>
            <li>⌛ 总耗时：${{ env.total_duration }} 秒</li>
            <li>📈 成功率：${{ env.success_rate }}%</li>
          </ul>

          <h3>📊 处理统计</h3>
          <ul>
            <li>总镜像数：${{ env.total_images }} 个</li>
            <li>成功处理：$((${{ env.total_images }} - ${{ env.failed_images }})) 个</li>
            <li>处理失败：${{ env.failed_images }} 个</li>
          </ul>

          <h3>🐳 镜像处理结果</h3>
          <pre style="background-color: #f6f8fa; padding: 10px; border-radius: 5px;">${{ env.IMAGES_INFO }}</pre>
          
          ${{ env.ERROR_INFO && '<h3>❌ 错误信息</h3><pre style="color: #ff0000; background-color: #ffebeb; padding: 10px; border-radius: 5px;">' || '' }}${{ env.ERROR_INFO }}${{ env.ERROR_INFO && '</pre>' || '' }}
          
          <hr>
          <p>📌 更多详细信息请查看 <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">构建日志</a></p>
          
          <p style="color: #666; font-size: 12px;">此邮件由 GitHub Actions 自动发送，请勿直接回复。</p>

    # 添加获取当前时间的步骤
    - name: Get current time
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    # 收集推送的镜像信息
    - name: Collect Images Info
      if: always()
      run: |
        echo "IMAGES_INFO<<EOF" >> $GITHUB_ENV
        echo "推送的镜像列表：" >> $GITHUB_ENV
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ -n "$line" && ! "$line" =~ ^\s*# ]]; then
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            echo "✓ $image" >> $GITHUB_ENV
          fi
        done < images.txt
        echo "EOF" >> $GITHUB_ENV
