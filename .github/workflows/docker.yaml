name: Pusher

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨 1 点执行


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Start Build Process
      run: |
        echo "### 🚀 开始构建流程" >> $GITHUB_STEP_SUMMARY
        echo "#### ⏰ 构建信息" >> $GITHUB_STEP_SUMMARY
        echo "- 开始时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- 触发事件: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 执行分支: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 构建编号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

    - name: System Info Check
      run: |
        echo "### 💻 系统信息" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "操作系统: $(uname -a)" >> $GITHUB_STEP_SUMMARY
        echo "Docker 版本: $(docker --version)" >> $GITHUB_STEP_SUMMARY
        echo "磁盘使用情况:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Before freeing up disk space
      run: |
        echo "::group::磁盘空间检查 - 清理前"
        df -hT
        echo "::endgroup::"

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: After Space Cleanup
      run: |
        echo "### 💾 磁盘空间优化" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "清理后可用空间:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # 记录开始时间
    - name: Set start time
      id: start_time
      run: |
        echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push image Aliyun
      id: build_push
      run: |
        # 初始化变量
        build_start_time=$(date +%s)
        processed_images=0
        failed_images=0
        attempt=1
        
        # 定义重试函数
        retry_command() {
          local cmd="$1"
          local max_attempts=3
          local attempt=1
          local wait_time=10
          local error_msg=""
          local retry_count=0
          
          while [ $attempt -le $max_attempts ]; do
            echo "::notice::尝试执行命令 (第 $attempt 次): $cmd"
            if eval "$cmd" 2> >(tee /tmp/error.log >&2); then
              retry_count=$((attempt-1))
              return 0
            else
              error_msg=$(cat /tmp/error.log)
              echo "::warning::命令执行失败 (尝试 $attempt/$max_attempts)"
              echo "错误信息: $error_msg"
              if [ $attempt -lt $max_attempts ]; then
                echo "等待 ${wait_time} 秒后重试..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
              fi
              ((attempt++))
            fi
          done
          
          echo "::error::命令执行失败，已达到最大重试次数"
          echo "最后一次错误信息: $error_msg"
          return 1
        }

        echo "### 🔄 镜像处理进度" >> $GITHUB_STEP_SUMMARY
        echo "#### 登录状态" >> $GITHUB_STEP_SUMMARY
        
        # Docker 登录
        if retry_command "docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY"; then
          echo "✅ 阿里云容器镜像服务登录成功" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ 阿里云容器镜像服务登录失败" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # 初始化错误信息收集
        errors=()
        
        # 统计总镜像数
        total_images=0
        while IFS= read -r line || [ -n "$line" ]; do
          line=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          if [[ -n "$line" && ! "$line" =~ ^# ]]; then
            ((total_images++))
          fi
        done < images.txt
        
        echo "#### 📊 处理统计" >> $GITHUB_STEP_SUMMARY
        echo "- 待处理镜像总数: ${total_images}" >> $GITHUB_STEP_SUMMARY
        
        # 处理镜像
        while IFS= read -r line || [ -n "$line" ]; do
          line=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          if [[ -n "$line" && ! "$line" =~ ^# ]]; then
            ((processed_images++))
            
            # 提取平台信息和镜像名称
            if [[ "$line" =~ --platform[[:space:]]*([^[:space:]]+)[[:space:]]*(.+) ]]; then
              platform="${BASH_REMATCH[1]}"
              image="${BASH_REMATCH[2]}"
            else
              platform=""
              image="$line"
            fi
            
            echo "::group::处理镜像 ($processed_images/$total_images): $image"
            
            # 拉取镜像
            pull_cmd="docker pull"
            [ -n "$platform" ] && pull_cmd+=" --platform $platform"
            pull_cmd+=" $image"
            
            if retry_command "$pull_cmd"; then
              # 构建目标镜像名
              platform_prefix=""
              [ -n "$platform" ] && platform_prefix="${platform//\//_}_"
              
              image_name=$(echo "$image" | awk -F: '{print $1}')
              image_tag=$(echo "$image" | awk -F: '{print $2}')
              [ -z "$image_tag" ] && image_tag="latest"
              
              target_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/${platform_prefix}${image_name##*/}:$image_tag"
              
              if retry_command "docker tag $image $target_image && docker push $target_image"; then
                echo "✅ 成功处理镜像: $image -> $target_image"
              else
                ((failed_images++))
                errors+=("镜像 $image: 标记或推送失败")
              fi
            else
              ((failed_images++))
              errors+=("镜像 $image: 拉取失败")
            fi
            
            # 清理镜像
            docker rmi $image $target_image 2>/dev/null || true
            echo "::endgroup::"
          fi
        done < images.txt
        
        # 更新环境变量
        echo "build_start_time=${build_start_time}" >> $GITHUB_ENV
        echo "total_images=${total_images}" >> $GITHUB_ENV
        echo "failed_images=${failed_images}" >> $GITHUB_ENV
        
        # 如果有错误，记录到环境变量
        if [ ${#errors[@]} -gt 0 ]; then
          echo "ERROR_INFO<<EOF" >> $GITHUB_ENV
          printf '%s\n' "${errors[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        # 如果有失败，设置错误状态
        [ $failed_images -gt 0 ] && exit 1

    - name: Build Summary
      if: always()
      run: |
        if [ -n "${{ env.build_start_time }}" ]; then
          start_time="${{ env.build_start_time }}"
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⏰ 时间信息" >> $GITHUB_STEP_SUMMARY
          echo "- 开始时间: $(date -d "@$start_time" '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 结束时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 总耗时: ${{ env.total_duration }} 秒" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⚠️ 构建过程中断" >> $GITHUB_STEP_SUMMARY
          echo "构建过程未正常完成，无法获取完整的时间信息。" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 📊 处理统计" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.total_images }}" ]; then
          echo "- 总镜像数: ${{ env.total_images }} 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功数量: $((${{ env.total_images }} - ${{ env.failed_images }})) 个" >> $GITHUB_STEP_SUMMARY
          echo "- 失败数量: ${{ env.failed_images }} 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功率: ${{ env.success_rate }}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ 无可用统计信息" >> $GITHUB_STEP_SUMMARY
        fi

    # 添加邮件通知功能
    - name: Send Notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_PASSWORD }}
        subject: 'Ali_ACR_Pusher 构建通知'
        to: ${{ secrets.GMAIL_USERNAME }}
        from: ${{ secrets.GMAIL_USERNAME }}
        html_body: |
          <h2>🔔 构建通知</h2>
          
          <h3>📊 构建状态</h3>
          ${{ job.status == 'success' && '✅ 构建成功' || '❌ 构建失败' }}
          
          <h3>📋 详细信息</h3>
          <ul>
            <li>🏢 仓库：${{ github.repository }}</li>
            <li>🔄 触发事件：${{ github.event_name }}</li>
            <li>📝 提交信息：${{ github.event.head_commit.message }}</li>
            <li>👤 提交者：${{ github.actor }}</li>
            <li>⏰ 开始时间：$(date -d @${{ env.build_start_time }} '+%Y-%m-%d %H:%M:%S')</li>
            <li>⌛ 总耗时：${{ env.total_duration }} 秒</li>
            <li>📈 成功率：${{ env.success_rate }}%</li>
          </ul>

          <h3>📊 处理统计</h3>
          <ul>
            <li>总镜像数：${{ env.total_images }} 个</li>
            <li>成功处理：$((${{ env.total_images }} - ${{ env.failed_images }})) 个</li>
            <li>处理失败：${{ env.failed_images }} 个</li>
          </ul>

          <h3>🐳 镜像处理结果</h3>
          <pre style="background-color: #f6f8fa; padding: 10px; border-radius: 5px;">${{ env.IMAGES_INFO }}</pre>
          
          ${{ env.ERROR_INFO && '<h3>❌ 错误信息</h3><pre style="color: #ff0000; background-color: #ffebeb; padding: 10px; border-radius: 5px;">' || '' }}${{ env.ERROR_INFO }}${{ env.ERROR_INFO && '</pre>' || '' }}
          
          <hr>
          <p>📌 更多详细信息请查看 <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">构建日志</a></p>
          
          <p style="color: #666; font-size: 12px;">此邮件由 GitHub Actions 自动发送，请勿直接回复。</p>

    # 添加获取当前时间的步骤
    - name: Get current time
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    # 收集推送的镜像信息
    - name: Collect Images Info
      if: always()
      run: |
        echo "IMAGES_INFO<<EOF" >> $GITHUB_ENV
        echo "推送的镜像列表：" >> $GITHUB_ENV
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ -n "$line" && ! "$line" =~ ^\s*# ]]; then
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            echo "✓ $image" >> $GITHUB_ENV
          fi
        done < images.txt
        echo "EOF" >> $GITHUB_ENV
