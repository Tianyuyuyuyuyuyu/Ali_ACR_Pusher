name: Pusher

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨 1 点执行


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Start Build Process
      run: |
        echo "### 🚀 开始构建流程" >> $GITHUB_STEP_SUMMARY
        echo "#### ⏰ 构建信息" >> $GITHUB_STEP_SUMMARY
        echo "- 开始时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- 触发事件: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 执行分支: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 构建编号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

    - name: System Info Check
      run: |
        echo "### 💻 系统信息" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "操作系统: $(uname -a)" >> $GITHUB_STEP_SUMMARY
        echo "Docker 版本: $(docker --version)" >> $GITHUB_STEP_SUMMARY
        echo "磁盘使用情况:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Before freeing up disk space
      run: |
        echo "::group::磁盘空间检查 - 清理前"
        df -hT
        echo "::endgroup::"

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: After Space Cleanup
      run: |
        echo "### 💾 磁盘空间优化" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "清理后可用空间:" >> $GITHUB_STEP_SUMMARY
        df -h | grep -v tmpfs >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    # 记录开始时间
    - name: Set start time
      id: start_time
      run: |
        echo "time=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

    - name: Build and push image Aliyun
      id: build_push
      continue-on-error: true  # 允许单个镜像失败不影响整体流程
      run: |
        # 初始化时间变量
        build_start_time=$(date +%s)
        processed_images=0
        failed_images=0
        attempt=1  # 初始化 attempt 变量

        # 添加调试信息
        echo "Debug: 显示 images.txt 内容"
        cat images.txt
        echo "Debug: 显示文件编码"
        file images.txt

        # 设置环境变量
        export DOCKER_BUILDKIT=1
        export DOCKER_CLI_EXPERIMENTAL=enabled

        # 添加错误恢复函数
        cleanup_and_continue() {
          local image="$1"
          echo "正在清理失败的镜像处理..."
          docker rmi "$image" 2>/dev/null || true
          docker rmi "$new_image" 2>/dev/null || true
          rm -f /tmp/output.log /tmp/error.log
        }

        # 修改重试函数
        retry_command() {
          local cmd="$1"
          local max_attempts=3
          local attempt=1
          local wait_time=10

          while [ $attempt -le $max_attempts ]; do
            if eval "$cmd" > /tmp/output.log 2> /tmp/error.log; then
              return 0
            else
              echo "::warning::Command failed (attempt $attempt/$max_attempts)"
              cat /tmp/error.log

              # 清理可能的残留状态
              cleanup_and_continue "$image"

              if [ $attempt -lt $max_attempts ]; then
                echo "等待 ${wait_time} 秒后重试..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
              fi
              ((attempt++))
            fi
          done

          return 1
        }

        # 添加详细日志记录
        log_progress() {
          local stage="$1"
          local message="$2"
          echo "::group::$stage"
          echo "$message"
          echo "::endgroup::"

          # 同时记录到摘要
          echo "- $message" >> $GITHUB_STEP_SUMMARY
        }

        # 开始处理镜像
        while IFS= read -r line || [ -n "$line" ]; do
          log_progress "处理镜像" "开始处理: $line"
          # 忽略空行与注释
          [[ -z "$line" ]] && continue
          if [[ "$line" =~ ^[[:space:]]*# ]]; then
            continue
          fi

          # 使用子shell处理每个镜像，避免单个失败影响整体
          (
            set +e  # 禁用错误立即退出

            # 提取镜像名称和标签
            image_name_tag="$(echo "$line" | awk -F ':' '{print $1}')"
            tag="$(echo "$line" | awk -F ':' '{print $2}')"
            if [ -n "$tag" ]; then
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag:$tag"
            else
              new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
            fi

            # 直接拉取镜像
            if retry_command "docker pull $line"; then
              echo "Debug: 镜像拉取成功: $line"

              if retry_command "docker tag $image $new_image && docker push $new_image"; then
                end_time=$(date +%s)
                duration=$((end_time - start_time))
                echo "Debug: 成功推送镜像: $new_image (耗时: ${duration}s)"
                log_progress "处理完成" "完成处理: $line"
              else
                echo "Debug: 镜像推送失败"
                ((failed_images++))
                echo "::warning::推送失败: $image -> $new_image"
              fi
            else
              echo "Debug: 镜像拉取失败"
              ((failed_images++))
              echo "::warning::拉取失败: $line"
            fi
          )

          ((processed_images++))
        done < images.txt

        # 资源清理
        cleanup_resources() {
          echo "执行定期资源清理..."
          # 清理未使用的镜像
          docker image prune -f
          # 清理构建缓存
          docker builder prune -f
          # 显示磁盘使用情况
          df -h
        }

        # 在主循环中定期调用
        image_count=0
        while IFS= read -r line || [ -n "$line" ]; do
          # ... 处理代码 ...
          ((image_count++))
          if [ $((image_count % 3)) -eq 0 ]; then
            cleanup_resources
          fi
        done < images.txt

        # 记录最终统计信息
        build_end_time=$(date +%s)
        total_duration=$((build_end_time - build_start_time))
        echo "#### 📈 最终统计" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 成功处理: $((processed_images - failed_images)) 个" >> $GITHUB_STEP_SUMMARY
        echo "- ❌ 处理失败: ${failed_images} 个" >> $GITHUB_STEP_SUMMARY
        echo "- ⏱️ 总耗时: ${total_duration} 秒" >> $GITHUB_STEP_SUMMARY

    - name: Build Summary
      if: always()
      run: |
        if [ -n "${{ env.build_start_time }}" ]; then
          start_time="${{ env.build_start_time }}"
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⏰ 时间信息" >> $GITHUB_STEP_SUMMARY
          echo "- 开始时间: $(date -d "@$start_time" '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 结束时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
          echo "- 总耗时: ${{ env.total_duration }} 秒" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📋 构建完成报告" >> $GITHUB_STEP_SUMMARY
          echo "#### ⚠️ 构建过程中断" >> $GITHUB_STEP_SUMMARY
          echo "构建过程未正常完成，无法获取完整的时间信息。" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 📊 处理统计" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.total_images }}" ]; then
          total="${{ env.total_images }}"
          failed="${{ env.failed_images }}"
          success=$((total - failed))
          
          echo "Debug: 计算统计信息"
          echo "- 总数: $total"
          echo "- 失败: $failed"
          echo "- 成功: $success"
          
          echo "- 总镜像数: $total 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功数量: $success 个" >> $GITHUB_STEP_SUMMARY
          echo "- 失败数量: $failed 个" >> $GITHUB_STEP_SUMMARY
          echo "- 成功率: ${{ env.success_rate }}%" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ 无可用统计信息" >> $GITHUB_STEP_SUMMARY
        fi

    # 添加邮件通知功能
    - name: Send Notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.GMAIL_USERNAME }}
        password: ${{ secrets.GMAIL_PASSWORD }}
        subject: 'Ali_ACR_Pusher 构建通知'
        to: ${{ secrets.GMAIL_USERNAME }}
        from: ${{ secrets.GMAIL_USERNAME }}
        html_body: |
          <h2>🔔 构建通知</h2>
          
          <h3>📊 构建状态</h3>
          ${{ job.status == 'success' && '✅ 构建成功' || '❌ 构建失败' }}
          
          <h3>📋 详细信息</h3>
          <ul>
            <li>🏢 仓库：${{ github.repository }}</li>
            <li>🔄 触发事件：${{ github.event_name }}</li>
            <li>📝 提交信息：${{ github.event.head_commit.message }}</li>
            <li>👤 提交者：${{ github.actor }}</li>
            <li>⏰ 开始时间：$(date -d @${{ env.build_start_time }} '+%Y-%m-%d %H:%M:%S')</li>
            <li>⌛ 总耗时：${{ env.total_duration }} 秒</li>
            <li>📈 成功率：${{ env.success_rate }}%</li>
          </ul>

          <h3>📊 处理统计</h3>
          <ul>
            <li>总镜像数：${{ env.total_images }} 个</li>
            <li>成功处理：$((${{ env.total_images }} - ${{ env.failed_images }})) 个</li>
            <li>处理失败：${{ env.failed_images }} 个</li>
          </ul>

          <h3>🐳 镜像处理结果</h3>
          <pre style="background-color: #f6f8fa; padding: 10px; border-radius: 5px;">${{ env.IMAGES_INFO }}</pre>
          
          ${{ env.ERROR_INFO && '<h3>❌ 错误信息</h3><pre style="color: #ff0000; background-color: #ffebeb; padding: 10px; border-radius: 5px;">' || '' }}${{ env.ERROR_INFO }}${{ env.ERROR_INFO && '</pre>' || '' }}
          
          <hr>
          <p>📌 更多详细信息请查看 <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">构建日志</a></p>
          
          <p style="color: #666; font-size: 12px;">此邮件由 GitHub Actions 自动发送，请勿直接回复。</p>

    # 添加获取当前时间的步骤
    - name: Get current time
      id: date
      run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

    # 收集推送的镜像信息
    - name: Collect Images Info
      if: always()
      run: |
        echo "IMAGES_INFO<<EOF" >> $GITHUB_ENV
        echo "推送的镜像列表：" >> $GITHUB_ENV
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ -n "$line" && ! "$line" =~ ^\s*# ]]; then
            image=$(echo "$line" | awk '{print $NF}')
            image="${image%%@*}"
            echo "✓ $image" >> $GITHUB_ENV
          fi
        done < images.txt
        echo "EOF" >> $GITHUB_ENV
